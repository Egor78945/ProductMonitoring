syntax = "proto3";

package com.example.grpc.user;

message UserMessage {
  optional int64 id = 1;
  string uuid = 2;
  string email = 3;
  int64 status_id = 4;
  int64 registered_at = 5;
  repeated int64 userRoles = 6;
}

message AccountMessage {
  optional int64 id = 1;
  string uuid = 2;
  string name = 3;
  string user_uuid = 4;
  int64 status_id = 5;
  int64 created_at = 6;
  bool main = 7;
}

message UserRoleMessage {
  string userUUID = 1;
  int64 roleId = 2;
}

message UserRegistrationMessage {
  UserMessage user = 1;
  AccountMessage account = 2;
}

message BooleanMessage {
  bool boolean = 1;
}

message StringMessage {
  string string = 1;
}

message EmptyMessage {}

service AuthenticationProtoService {
  rpc register(UserRegistrationMessage) returns (UserRegistrationMessage);
  rpc delete(UserRegistrationMessage) returns (EmptyMessage);
}

service UserProtoService {
  rpc save(UserMessage) returns (EmptyMessage);
  rpc existsUserByEmail(StringMessage) returns (BooleanMessage);
  rpc existsUserByUUID(StringMessage) returns (BooleanMessage);
  rpc getUserByUUID(StringMessage) returns (UserMessage);
  rpc getByAccountName(StringMessage) returns (UserMessage);
}

service AccountProtoService {
  rpc save(AccountMessage) returns (EmptyMessage);
  rpc existsAccountByUUID(StringMessage) returns (BooleanMessage);
  rpc existsAccountByName(StringMessage) returns (BooleanMessage);
  rpc getAccountByUUID(StringMessage) returns (AccountMessage);
  rpc getAccountByUserUUID(StringMessage) returns(AccountMessage);
}