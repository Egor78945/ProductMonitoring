version: '3.9'

networks:
  service-management:
    driver: bridge
  internal-service:
    driver: bridge
  external-service:
    driver: bridge

services:
  service-discovery:
    container_name: ${SERVICE_DISCOVERY_HOST}
    networks:
      - service-management
      - internal-service
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
        SERVICE_DISCOVERY_PORT_INNER: ${SERVICE_DISCOVERY_PORT_INNER}
    env_file:
      - .env
    restart: on-failure
    ports:
      - ${SERVICE_DISCOVERY_PORT_OUTER}:${SERVICE_DISCOVERY_PORT_INNER}

  api-gateway:
    container_name: ${API_GATEWAY_HOST}
    networks:
      - service-management
      - external-service
      - internal-service
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
        API_GATEWAY_PORT_INNER: ${API_GATEWAY_PORT_INNER}
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - service-discovery
    ports:
      - ${API_GATEWAY_PORT_OUTER}:${API_GATEWAY_PORT_INNER}

  nginx:
    image: nginx
    networks:
      - service-management
    volumes:
      - ./configuration/nginx/nginx.conf:/etc/nginx/nginx.conf
    env_file:
      - .env
    ports:
      - ${NGINX_PORT_OUTER}:${NGINX_PORT_INNER}

  postgres:
    container_name: ${POSTGRES_HOST}
    networks:
      - external-service
      - internal-service
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE_USER_NAME}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: on-failure
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT_OUTER}:${POSTGRES_PORT_INNER}

  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
    networks:
      - external-service
      - internal-service
    container_name: ${KEYCLOAK_HOST}
    command:
      - start-dev
      - --import-realm
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KEYCLOAK_ADMIN_NAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT_INNER}/${POSTGRES_DATABASE_USER_NAME}
      - KC_DB_USERNAME=${POSTGRES_USERNAME}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
      - KC_HTTP_PORT=${KEYCLOAK_PORT_INNER}
    volumes:
      - ./configuration/keycloak/realm/authentication/import/realm-import.json:/opt/keycloak/data/import/realm-config.json:ro
    env_file:
      - .env
    ports:
      - ${KEYCLOAK_PORT_OUTER}:${KEYCLOAK_PORT_INNER}

  user-database-manager-service:
    container_name: ${USER_DATABASE_MANAGER_SERVICE_HOST}
    networks:
      - internal-service
    build:
      context: ./user-database-manager-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - service-discovery
      - postgres

  product-processor-service:
    container_name: ${PRODUCT_PROCESSOR_SERVICE_HOST}
    networks:
      - internal-service
    build:
      context: ./product-processor-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    volumes:
      - ./configuration/playwright/ms-playwright:/root/.cache/ms-playwright
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - user-database-manager-service

  authentication-service:
    container_name: ${AUTHENTICATION_SERVICE_HOST}
    networks:
      - internal-service
    build:
      context: ./authentication-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    env_file:
      - .env

  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    hostname: ${ZOOKEEPER_HOST}
    container_name: ${ZOOKEEPER_HOST}
    networks:
      - external-service
      - internal-service
    ports:
      - ${ZOOKEEPER_PORT_OUTER}:${ZOOKEEPER_PORT_INNER}
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT_INNER}
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: ${KAFKA1_HOST}
    container_name: ${KAFKA1_HOST}
    networks:
      - external-service
      - internal-service
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA1_PORT_PLAINTEXT_OUTER}:${KAFKA1_PORT_PLAINTEXT_INNER}
      - ${KAFKA1_PORT_OUTER}:${KAFKA1_PORT_INNER}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT_INNER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA1_HOST}:${KAFKA1_PORT_PLAINTEXT_INNER},PLAINTEXT_HOST://${KAFKA1_HOST}:${KAFKA1_PORT_INNER}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  kafka2:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: ${KAFKA2_HOST}
    container_name: ${KAFKA2_HOST}
    networks:
      - external-service
      - internal-service
    depends_on:
      - kafka1
    ports:
      - ${KAFKA2_PORT_PLAINTEXT_OUTER}:${KAFKA2_PORT_PLAINTEXT_INNER}
      - ${KAFKA2_PORT_OUTER}:${KAFKA2_PORT_INNER}
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT_INNER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA2_HOST}:${KAFKA2_PORT_PLAINTEXT_INNER},PLAINTEXT_HOST://${KAFKA2_HOST}:${KAFKA2_PORT_INNER}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  product-manager-service:
    container_name: ${PRODUCT_MANAGER_SERVICE_HOST}
    networks:
      - internal-service
    build:
      context: ./product-manager-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    env_file:
      - .env
    depends_on:
      - kafka1
      - kafka2